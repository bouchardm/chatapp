{"version":3,"sources":["indexdbwrapper.js"],"names":["promisifyRequest","obj","Promise","resolve","reject","onsuccess","event","result","unlisten","onerror","error","removeEventListener","addEventListener","IndexDBWrapper","name","version","upgradeCallback","request","indexedDB","open","this","ready","onupgradeneeded","oldVersion","supported","self","IndexDBWrapperProto","prototype","transaction","stores","modeOrCallback","callback","then","db","mode","apply","readPromise","tx","val","promise","all","map","get","store","key","objectStore","put","value"],"mappings":"AAAA,YAEA,SAAAA,kBAAAC,GACA,MAAA,IAAAC,SAAA,SAAAC,EAAAC,GACA,QAAAC,GAAAC,GACAH,EAAAF,EAAAM,QACAC,IAEA,QAAAC,GAAAH,GACAF,EAAAH,EAAAS,OACAF,IAEA,QAAAA,KACAP,EAAAU,oBAAA,WAAAN,GACAJ,EAAAU,oBAAA,UAAAN,GACAJ,EAAAU,oBAAA,QAAAF,GACAR,EAAAU,oBAAA,QAAAF,GAEAR,EAAAW,iBAAA,WAAAP,GACAJ,EAAAW,iBAAA,UAAAP,GACAJ,EAAAW,iBAAA,QAAAH,GACAR,EAAAW,iBAAA,QAAAH,KAIA,QAAAI,gBAAAC,EAAAC,EAAAC,GACA,GAAAC,GAAAC,UAAAC,KAAAL,EAAAC,EACAK,MAAAC,MAAArB,iBAAAiB,GACAA,EAAAK,gBAAA,SAAAhB,GACAU,EAAAC,EAAAV,OAAAD,EAAAiB,aAIAV,eAAAW,UAAA,aAAAC,KAEA,IAAAC,qBAAAb,eAAAc,SAEAD,qBAAAE,YAAA,SAAAC,EAAAC,EAAAC,GACA,MAAAX,MAAAC,MAAAW,KAAA,SAAAC,GACA,GAAAC,GAAA,UAEAJ,GAAAK,MACAJ,EAAAD,EAEAA,IACAI,EAAAJ,EAGA,IAGAM,GAHAC,EAAAJ,EAAAL,YAAAC,EAAAK,GACAI,EAAAP,EAAAM,EAAAJ,GACAM,EAAAvC,iBAAAqC,EAGA,OAAAC,IAKAF,EADAE,EAAA,IAAA,UAAAA,GAAA,GACApC,QAAAsC,IAAAF,EAAAG,IAAAzC,mBAGAA,iBAAAsC,GAGAC,EAAAP,KAAA,WACA,MAAAI,MAXAG,KAgBAb,oBAAAgB,IAAA,SAAAC,EAAAC,GACA,MAAAxB,MAAAQ,YAAAe,EAAA,SAAAN,GACA,MAAAA,GAAAQ,YAAAF,GAAAD,IAAAE,MAIAlB,oBAAAoB,IAAA,SAAAH,EAAAC,EAAAG,GACA,MAAA3B,MAAAQ,YAAAe,EAAA,YAAA,SAAAN,GACAA,EAAAQ,YAAAF,GAAAG,IAAAC,EAAAH,MAIAlB,oBAAAA,UAAA,SAAAiB,EAAAC,GACA,MAAAxB,MAAAQ,YAAAe,EAAA,YAAA,SAAAN,GACAA,EAAAQ,YAAAF,GAAAN,UAAAO","file":"indexdbwrapper.js","sourcesContent":["'use strict';\n\nfunction promisifyRequest(obj) {\n    return new Promise(function(resolve, reject) {\n        function onsuccess(event) {\n            resolve(obj.result);\n            unlisten();\n        }\n        function onerror(event) {\n            reject(obj.error);\n            unlisten();\n        }\n        function unlisten() {\n            obj.removeEventListener('complete', onsuccess);\n            obj.removeEventListener('success', onsuccess);\n            obj.removeEventListener('error', onerror);\n            obj.removeEventListener('abort', onerror);\n        }\n        obj.addEventListener('complete', onsuccess);\n        obj.addEventListener('success', onsuccess);\n        obj.addEventListener('error', onerror);\n        obj.addEventListener('abort', onerror);\n    });\n}\n\nfunction IndexDBWrapper(name, version, upgradeCallback) {\n    var request = indexedDB.open(name, version);\n    this.ready = promisifyRequest(request);\n    request.onupgradeneeded = function(event) {\n        upgradeCallback(request.result, event.oldVersion);\n    };\n}\n\nIndexDBWrapper.supported = 'indexedDB' in self;\n\nvar IndexDBWrapperProto = IndexDBWrapper.prototype;\n\nIndexDBWrapperProto.transaction = function(stores, modeOrCallback, callback) {\n    return this.ready.then(function(db) {\n        var mode = 'readonly';\n\n        if (modeOrCallback.apply) {\n            callback = modeOrCallback;\n        }\n        else if (modeOrCallback) {\n            mode = modeOrCallback;\n        }\n\n        var tx = db.transaction(stores, mode);\n        var val = callback(tx, db);\n        var promise = promisifyRequest(tx);\n        var readPromise;\n\n        if (!val) {\n            return promise;\n        }\n\n        if (val[0] && 'result' in val[0]) {\n            readPromise = Promise.all(val.map(promisifyRequest));\n        }\n        else {\n            readPromise = promisifyRequest(val);\n        }\n\n        return promise.then(function() {\n            return readPromise;\n        });\n    });\n};\n\nIndexDBWrapperProto.get = function(store, key) {\n    return this.transaction(store, function(tx) {\n        return tx.objectStore(store).get(key);\n    });\n};\n\nIndexDBWrapperProto.put = function(store, key, value) {\n    return this.transaction(store, 'readwrite', function(tx) {\n        tx.objectStore(store).put(value, key);\n    });\n};\n\nIndexDBWrapperProto.delete = function(store, key) {\n    return this.transaction(store, 'readwrite', function(tx) {\n        tx.objectStore(store).delete(key);\n    });\n};"],"sourceRoot":"/source/"}