{"version":3,"sources":["drag_to_resize.user.js","chat.js","notification.js"],"names":[],"mappingsjQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpfile":"all.js","sourcesContent":["// ==UserScript==\n// @name          Drag to Resize\n// @namespace \t  http://kylej.name/\n// @description\t  Drag to resize images, based on code in the RES.\n// @author        Kabaka\n// @include       *\n// @exclude       http://www.chess.com/*\n// @exclude       http://chess.com/*\n// ==/UserScript==\n\n/*\n * Drag to Resize - Drag images to resize them no matter where you are.\n *\n * The image resizing code was extracted from honestbleeps's\n * (steve@honestbleeps.com) Reddit Enhancement Suite, a GPL\n * Greasemonkey script. The idea was, as far as I know, all his. What\n * I've done is duplicated that feature in this script and started\n * adding on things to make it useful in different contexts.\n *\n * Because it now runs everywhere, it will likely break some web\n * sites. And it definitely opens up doors for some silliness such as\n * making images hilariously gigantic. If this script causes you to\n * lose data, money, or time, don't hold me responsible!\n *\n *\n * Instructions:\n *\n *   To resize an image, hold the left mouse button and drag. Down and to the\n *   right will expand. Up and to the left will shrink. Images aligned to the\n *   right will expand in an unusual way. Sorry.\n *\n *   To reset an image to original size, right-click it.\n *\n *   To make an image fit the screen (by height), double-click.\n *\n *   To drag an image without resizing (as if the script were not installed),\n *   hold control (or command on Mac) and drag.\n *\n *\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar imageData = Array();\n\n/*\n * Find all img elements on the page and feed them to makeImageZoomable().\n * Also, record the image's original width in imageData[] in case the user\n * wants to restore size later.\n */\nfunction findAllImages() {\n  var imgs = document.getElementsByTagName('img');\n\n  for (i = 0; i < imgs.length; ++i) {\n    // We will populate this as the user interacts with the image, if they\n    // do at all.\n    imageData[i]         = {};\n    imageData[i].resized = false;\n\n    imgs[i].dragToResizeId = i;\n\n    makeImageZoomable(imgs[i]);\n  }\n\n}\n\n/*\n * Calculate the drag size for the event. This is taken directly from\n * honestbleeps's Reddit Enhancement Suite.\n *\n * @param mousedown e or mousemove event.\n * @return Size for image resizing.\n */\nfunction getDragSize(e) {\n  return (p = Math.pow)(p(e.clientX - (rc = e.target.getBoundingClientRect()).left, 2) + p(e.clientY - rc.top, 2), .5);\n}\n\n/*\n * Get the viewport's vertical size. This should work in most browsers. We'll\n * use this when making images fit the screen by height.\n *\n * @return int Viewport size.\n */\nfunction getHeight() {\n  return window.innerHeight ||\n    document.documentElement.clientHeight ||\n    document.body.clientHeight;\n}\n\n/*\n * Get the imageData entry for the given event's target.\n *\n * @return Object\n */\nfunction getImageData(e) {\n  return imageData[e.target.dragToResizeId];\n}\n\n/*\n  * Try to stop propagation of an event.\n  *\n  * @param event e Event to stop.\n  * @return false\n  */\nfunction stopEvent(e) {\n  e.preventDefault();\n  e.returnValue = false;\n  e.stopPropagation();\n\n  return false;\n}\n\n/*\n * Set up events for the given img element to make it zoomable via\n * drag to zoom. Most of this is taken directly from honestbleeps's\n * Reddit Enhancement Suite. Event functions are currently written\n * inline. For readability, I may move them. But the code is small\n * enough that I don't yet care.\n *\n * @param Object imgElement Image element.\n */\nfunction makeImageZoomable(imgElement) {\n  dragTargetData = {};\n\n  imgElement.addEventListener('mousedown', function(e) {\n    /*\n     * This is so we can support the command key on Mac. The combination of OS\n     * and browser changes how the key is passed to JavaScript. So we're just\n     * going to catch all of them. This means we'll also be catching meta keys\n     * for other systems. Oh well! Patches are welcome.\n     */\n    if (e.ctrlKey != 0 || (e.metaKey != null && e.metaKey != 0))\n      return true;\n\n    if (e.button !== 0)\n      return false;\n\n    // Store some data about the image in case we want to restore size later.\n\n    var myImageData = getImageData(e);\n\n    if (myImageData.position ==  null) {\n      myImageData.zIndex   = e.target.style.zIndex;\n      myImageData.width    = e.target.style.width;\n      myImageData.height   = e.target.style.height;\n      myImageData.position = e.target.style.position;\n    }\n\n    dragTargetData.image_width = e.target.width;\n    dragTargetData.dragSize    = getDragSize(e);\n\n    e.preventDefault();\n  }, true);\n\n\n  // Reset image to original size and unlock for future events.\n  imgElement.addEventListener('contextmenu', function(e) {\n    var myImageData = getImageData(e);\n\n    if (!myImageData.resized)\n      return true;\n\n    myImageData.resized = false;\n\n    e.target.style.zIndex    = myImageData.zIndex;\n    e.target.style.maxWidth  = e.target.style.width  = myImageData.width;\n    e.target.style.maxHeight = e.target.style.height = myImageData.height;\n    e.target.style.position  = myImageData.position;\n\n    return stopEvent(e);\n  }, true);\n\n  // Expand image to fill screen.\n  imgElement.addEventListener('dblclick', function(e) {\n    if (e.ctrlKey != 0 || (e.metaKey != null && e.metaKey != 0))\n      return true;\n\n    var myImageData = getImageData(e);\n\n    if (myImageData.resized) {\n      // If we've already resized it, we have to set this back to the\n      // original value. Otherwise, the max size image will keep the\n      // original width. Dunno why!\n      e.target.style.maxWidth = e.target.style.width = myImageData.width;\n    }\n\n    e.target.style.position  = \"fixed\";\n    e.target.style.zIndex    = 1000;\n    e.target.style.top       = 0;\n    e.target.style.left      = 0;\n    e.target.style.maxWidth  = e.target.style.width = \"auto\";\n    e.target.style.maxHeight = e.target.style.height = getHeight() + \"px\";\n\n    myImageData.resized = true;\n\n    // Most browsers will want to save the image or something. Prevent that.\n\n    return stopEvent(e);\n  }, true);\n\n  imgElement.addEventListener('mousemove', function(e) {\n    if (!dragTargetData.dragSize)\n      return true;\n\n    e.target.style.maxWidth =\n      e.target.style.width  =\n      ((getDragSize(e)) * dragTargetData.image_width / dragTargetData.dragSize) + \"px\";\n\n    e.target.style.maxHeight = '';\n    e.target.style.height    = 'auto';\n    e.target.style.zIndex    = 1000; // Make sure the image is on top.\n\n    if (e.target.style.position == '') {\n      e.target.style.position = 'relative';\n    }\n\n    getImageData(e).resized = true;\n  }, false);\n\n  imgElement.addEventListener('mouseout', function(e) {\n    dragTargetData.dragSize = false;\n\n    return !getImageData(e).resized;\n  }, false);\n\n  imgElement.addEventListener('mouseup', function(e) {\n    dragTargetData.dragSize = false;\n\n    return !getImageData(e).resized;\n  }, true);\n\n  imgElement.addEventListener('click', function(e) {\n    if (e.ctrlKey != 0 || (e.metaKey != null && e.metaKey != 0))\n      return true;\n\n    dragTargetData.dragSize = false;\n\n    if (getImageData(e).resized === false)\n      return true;\n\n    return stopEvent(e);\n  }, false);\n}\n\nfindAllImages();\ndocument.addEventListener('dragstart', function() {return false}, false);\n","new Vue({\n    el: '#messages',\n    data: {\n        messages: []\n    },\n    ready: function() {\n        this.setupPusher();\n        this.getMessages();\n    },\n    methods: {\n        setupPusher: function() {\n            var pusher = new Pusher('d85a864817e808027400', {\n                encrypted: true\n            });\n            var channel = pusher.subscribe('messages');\n            channel.bind('App\\\\Events\\\\MessageSent', this.addMessage);\n        },\n        addMessage: function(message) {\n            this.messages.push(message.message);\n        },\n        getMessages: function() {\n            this.$http.get('/messages', function(messages) {\n                this.$set('messages', messages);\n            });\n        },\n        deleteAll: function(e) {\n            this.$http.get('/messages/clean', function(messages) {\n                this.messages = []\n            });\n            e.preventDefault();\n        },\n        isImgLink: function(text) {\n            return(text.match(/\\.(jpeg|jpg|gif|png)$/) != null);\n        },\n        makeImageZoomable: function(img) {\n            imageData[img.path[0]]         = {};\n            imageData[img.path[0]].resized = false;\n            img.path[0].dragToResizeId = img.path[0];\n            makeImageZoomable(img.path[0]);\n        }\n    }\n});\n\n$('#message-form').submit(function() {\n    // submit the form\n    $(this).ajaxSubmit();\n    $('#message-form #message-field').clearFields();\n    $('#message-field').focus();\n    // return false to prevent normal browser submit and page navigation\n    return false;\n});\n\n$('#message-field').focus();","var isPushEnabled = false;\n\nwindow.addEventListener('load', function() {\n    var pushButton = document.querySelector('.js-push-button');\n    pushButton.addEventListener('click', function() {\n        if (isPushEnabled) {\n            unsubscribe();\n        } else {\n            subscribe();\n        }\n    });\n\n    // Check that service workers are supported, if so, progressively\n    // enhance and add push messaging support, otherwise continue without it.\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.register('/service-worker.js')\n            .then(initialiseState);\n    } else {\n        console.warn('Service workers aren\\'t supported in this browser.');\n    }\n});\n\n\n// Once the service worker is registered set the initial state\nfunction initialiseState() {\n    // Are Notifications supported in the service worker?\n    if (!('showNotification' in ServiceWorkerRegistration.prototype)) {\n        console.warn('Notifications aren\\'t supported.');\n        return;\n    }\n\n    // Check the current Notification permission.\n    // If its denied, it's a permanent block until the\n    // user changes the permission\n    if (Notification.permission === 'denied') {\n        console.warn('The user has blocked notifications.');\n        return;\n    }\n\n    // Check if push messaging is supported\n    if (!('PushManager' in window)) {\n        console.warn('Push messaging isn\\'t supported.');\n        return;\n    }\n\n    // We need the service worker registration to check for a subscription\n    navigator.serviceWorker.ready.then(function(serviceWorkerRegistration) {\n        // Do we already have a push message subscription?\n        serviceWorkerRegistration.pushManager.getSubscription()\n            .then(function(subscription) {\n                // Enable any UI which subscribes / unsubscribes from\n                // push messages.\n                var pushButton = document.querySelector('.js-push-button');\n                pushButton.disabled = false;\n\n                if (!subscription) {\n                    // We aren't subscribed to push, so set UI\n                    // to allow the user to enable push\n                    return;\n                }\n\n                // Keep your server in sync with the latest subscriptionId\n                sendSubscriptionToServer(subscription);\n\n                // Set your UI to show they have subscribed for\n                // push messages\n                pushButton.textContent = 'Disable Push Messages';\n                isPushEnabled = true;\n            })\n            .catch(function(err) {\n                console.warn('Error during getSubscription()', err);\n            });\n    });\n}\n\nfunction subscribe() {\n    // Disable the button so it can't be changed while\n    // we process the permission request\n    var pushButton = document.querySelector('.js-push-button');\n    pushButton.disabled = true;\n\n    navigator.serviceWorker.ready.then(function(serviceWorkerRegistration) {\n        serviceWorkerRegistration.pushManager.subscribe({userVisibleOnly: true})\n            .then(function(subscription) {\n                // The subscription was successful\n                isPushEnabled = true;\n                pushButton.textContent = 'Disable Push Messages';\n                pushButton.disabled = false;\n\n                // TODO: Send the subscription subscription.endpoint\n                // to your server and save it to send a push message\n                // at a later date\n                return sendSubscriptionToServer(subscription);\n            })\n            .catch(function(e) {\n                if (Notification.permission === 'denied') {\n                    // The user denied the notification permission which\n                    // means we failed to subscribe and the user will need\n                    // to manually change the notification permission to\n                    // subscribe to push messages\n                    window.Demo.debug.log('Permission for Notifications was denied');\n                    pushButton.disabled = true;\n                } else {\n                    // A problem occurred with the subscription, this can\n                    // often be down to an issue or lack of the gcm_sender_id\n                    // and / or gcm_user_visible_only\n                    window.Demo.debug.log('Unable to subscribe to push.', e);\n                    pushButton.disabled = false;\n                    pushButton.textContent = 'Enable Push Messages';\n                }\n            });\n    });\n}\n\nfunction unsubscribe() {\n    var pushButton = document.querySelector('.js-push-button');\n    pushButton.disabled = true;\n\n    navigator.serviceWorker.ready.then(function(serviceWorkerRegistration) {\n        // To unsubscribe from push messaging, you need get the\n        // subscription object, which you can call unsubscribe() on.\n        serviceWorkerRegistration.pushManager.getSubscription().then(\n            function(pushSubscription) {\n                // Check we have a subscription to unsubscribe\n                if (!pushSubscription) {\n                    // No subscription object, so set the state\n                    // to allow the user to subscribe to push\n                    isPushEnabled = false;\n                    pushButton.disabled = false;\n                    pushButton.textContent = 'Enable Push Messages';\n                    return;\n                }\n\n                // TODO: Make a request to your server to remove\n                // the users data from your data store so you\n                // don't attempt to send them push messages anymore\n\n                // We have a subscription, so call unsubscribe on it\n                pushSubscription.unsubscribe().then(function(successful) {\n                    pushButton.disabled = false;\n                    pushButton.textContent = 'Enable Push Messages';\n                    isPushEnabled = false;\n                }).catch(function(e) {\n                    // We failed to unsubscribe, this can lead to\n                    // an unusual state, so may be best to remove\n                    // the users data from your data store and\n                    // inform the user that you have done so\n\n                    console.log('Unsubscription error: ', e);\n                    pushButton.disabled = false;\n                    pushButton.textContent = 'Enable Push Messages';\n                });\n            }).catch(function(e) {\n                console.error('Error thrown while unsubscribing from push messaging.', e);\n            });\n    });\n}\n\n// This method handles the removal of subscriptionId\n// in Chrome 44 by concatenating the subscription Id\n// to the subscription endpoint\nfunction endpointWorkaround(pushSubscription) {\n    // Make sure we only mess with GCM\n    if (pushSubscription.endpoint.indexOf('https://android.googleapis.com/gcm/send') !== 0) {\n        return pushSubscription.endpoint;\n    }\n\n    var mergedEndpoint = pushSubscription.endpoint;\n    // Chrome 42 + 43 will not have the subscriptionId attached\n    // to the endpoint.\n    if (pushSubscription.subscriptionId &&\n        pushSubscription.endpoint.indexOf(pushSubscription.subscriptionId) === -1) {\n        // Handle version 42 where you have separate subId and Endpoint\n        mergedEndpoint = pushSubscription.endpoint + '/' +\n            pushSubscription.subscriptionId;\n    }\n    return mergedEndpoint;\n}\n\n// Send the subscription to the server, so after it can send notification\nfunction sendSubscriptionToServer(subscription) {\n    console.log(subscription);\n    $.ajax({\n        url: \"subscription\",\n        context: document.body,\n        method: 'POST',\n        data: {\n            'endpoint': subscription.endpoint\n        }\n    }).done(function(data) {\n        console.log(data);\n    });\n}\n\nself.addEventListener('push', function(event) {\n    console.log('Received a push message', event);\n\n    var title = 'Yay a message.';\n    var body = 'We have received a push message.';\n    var icon = '/images/icon-192x192.png';\n    var tag = 'simple-push-demo-notification-tag';\n\n    event.waitUntil(\n        self.registration.showNotification(title, {\n            body: body,\n            icon: icon,\n            tag: tag\n        })\n    );\n});\n\n"],"sourceRoot":"/source/"}